(index52.html)
JavaScript has only one type of number. Numbers can be written with or without decimals.

Extra large or extra small numbers can be written with scientific (exponent) notation:

Integers (numbers without a period or exponent notation) are accurate up to 15 digits.

The maximum number of decimals is 17, but floating point arithmetic is not always 100% accurate:

Adding Numbers and Strings(index53.html)

Numeric Strings(index54.html)
    JavaScript strings can have numeric content:

NaN - Not a Number(index55.html)
    NaN is a JavaScript reserved word indicating that a number is not a legal number.
    Trying to do arithmetic with a non-numeric string will result in NaN (Not a Number):

Infinity(index56.html)
    Infinity (or -Infinity) is the value JavaScript will return if you calculate a number outside the largest
    possible number.

Hexadecimal(index57.html)
    JavaScript interprets numeric constants as hexadecimal if they are preceded by 0x.
    Never write a number with a leading zero (like 07).
    Some JavaScript versions interpret numbers as octal if they are written with a leading zero.
    By default, JavaScript displays numbers as base 10 decimals.
    But you can use the toString() method to output numbers from base 2 to base 36.

Numbers Can be Objects
    Normally JavaScript numbers are primitive values created from literals
    But numbers can also be defined as objects with the keyword new:
    Do not create Number objects. It slows down execution speed.
    The new keyword complicates the code. This can produce some unexpected results:
    Objects cannot be compared:



