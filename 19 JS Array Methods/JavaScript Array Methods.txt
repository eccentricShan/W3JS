Converting Arrays to Strings(index67.html)
    The JavaScript method toString() converts an array to a string of (comma separated) array values.
    The join() method also joins all array elements into a string.
    It behaves just like toString(), but in addition you can specify the separator

Popping and Pushing
    it is easy to remove elements and add new elements.
    Popping items out of an array, or pushing items into an array.
    The pop() method returns the value that was "popped out":
    The push() method adds a new element to an array (at the end):
    The push() method returns the new array length:

Shifting Elements(index68.html)
    Shifting is equivalent to popping, working on the first element instead of the last.
    The shift() method removes the first array element and "shifts" all other elements to a lower index.
    The shift() method returns the string that was "shifted out":
    The unshift() method adds a new element to an array (at the beginning), and "unshifts" older elements:

Changing Elements
    The length property provides an easy way to append a new element to an array:

Deleting Elements(index69.html)
    Since JavaScript arrays are objects, elements can be deleted by using the JavaScript operator delete:
    Using delete may leave undefined holes in the array. Use pop() or shift() instead.

Splicing an Array
    The splice() method can be used to add new items to an array:
    The first parameter (2) defines the position where new elements should be added (spliced in).
    The second parameter (0) defines how many elements should be removed.
    With clever parameter setting, you can use splice() to remove elements without leaving "holes" in the array:
    The first parameter (0) defines the position where new elements should be added (spliced in).
    The second parameter (1) defines how many elements should be removed.
    The rest of the parameters are omitted. No new elements will be added.

Merging (Concatenating) Arrays(index70.html)
    The concat() method creates a new array by merging (concatenating) existing arrays: 
    The concat() method does not change the existing arrays. It always returns a new array.
    The concat() method can take any number of array arguments:
    The concat() method can also take strings as arguments

Slicing an Array(index71.html)
    The slice() method slices out a piece of an array into a new array.
    The slice() method creates a new array. It does not remove any elements from the source array.
    The slice() method can take two arguments like slice(1, 3).
    The method then selects elements from the start argument, and up to (but not including) the end argument.
    If the end argument is omitted, like in the first examples, the slice() method slices out the rest of the array.

Automatic toString()
    JavaScript automatically converts an array to a comma separated string when a primitive value is expected.
    This is always the case when you try to output an array.





